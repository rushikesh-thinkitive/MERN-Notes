
1. useEffect() is hook in react.
2. we can try with useEffect when we want to -
   1) fetchData
   2) Update Dom directly
   3) To setTimeout and setIntervals
   4) Local Storage Operation ( reading or writing data)
   
3. Syntax - 
    useEffect(callback , dependancy_array);

    Execution Timing: useEffect() runs after the component is rendered to ensure it does not interfere with the rendering process. 
    This is called the "commit phase," where React applies changes to the actual DOM.

    Dependency Array: You can control when useEffect() runs by specifying a dependency array. If the dependencies change, the effect re-runs; otherwise, 
    it does not.

    If the array is empty ([]), the effect runs only once, typically used for initialization or setup.
    If no array is provided, the effect runs after every render.

4.  Ex-

   import React, { useEffect, useState } from 'react';

const DataFetchingComponent = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
      const jsonData = await response.json();
      setData(jsonData); // Update state with fetched data
    };

    fetchData(); // Fetch data when the component mounts

        return () => {
        console.log('Component unmounting, clean up resources'); // Cleanup logic if needed
        };
    }, []); // Run only once on component mount

    return (
        <div>
        {data ? (
            <div>
            <h1>{data.title}</h1>
            <p>{data.body}</p>
            </div>
        ) : (
            'Loading...'
        )}
        </div>
    );
    };

    export default DataFetchingComponent;
