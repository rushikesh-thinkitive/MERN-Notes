1) React Portals are a feature in React that allows you to render components outside of their parent component's DOM hierarchy
2) This can be useful when you need to render a component in a different part of the DOM tree without losing its React behavior.
3) Ex- where we use React Portals -
   Dialogs:  To ensure they appear above all other content, even if they're nested deep within other components.
   Popovers:
   Notifications:  To render a notification that isn't tied to a specific place in the component hierarchy.

4) To create a portal, you use the ReactDOM.createPortal method, specifying the component to render and the target DOM node where it should be rendered.
5) Ex - 

    <!-- index.html or the equivalent entry point for your React app -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>React Portal Example</title>
</head>
<body>
  <div id="root"></div> <!-- Main React App Root -->
  <div id="portal-root"></div> <!-- Container for Portals -->
</body>
</html>



Notification component - 
 
 import React, { useEffect } from 'react';
import ReactDOM from 'react-dom';
import './Notification.css'; // Basic styling for the notification

// Notification component with React Portal
const Notification = ({ message, duration = 3000, onClose }) => {
  useEffect(() => {
    // Set a timer to close the notification after the specified duration
    const timer = setTimeout(onClose, duration);

    // Clean up the timer when the component is unmounted
    return () => clearTimeout(timer);
  }, [duration, onClose]);

  return ReactDOM.createPortal(
    <div className="notification">
      {message}
    </div>,
    document.getElementById('portal-root') // The portal target
  );
};

export default Notification;


Integrating notification in parent component - 

import React, { useState } from 'react';
import Notification from './Notification';

const App = () => {
  const [showNotification, setShowNotification] = useState(false);

  const handleShowNotification = () => {
    setShowNotification(true);

    // Hide the notification after it has been displayed
    setTimeout(() => setShowNotification(false), 3000); // 3 seconds
  };

  return (
    <div>
      <h1>React Portal Notification Example</h1>
      <button onClick={handleShowNotification}>Show Notification</button>
      
      {showNotification && (
        <Notification
          message="This is a notification!"
          duration={3000} // Notification duration in milliseconds
          onClose={() => setShowNotification(false)} // Close the notification
        />
      )}
    </div>
  );
};

export default App;




styling for component - 

/* Notification.css */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  background-color: #333;
  color: #fff;
  padding: 10px 20px;
  border-radius: 5px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  z-index: 1000; /* Ensure it's above other elements */
}
